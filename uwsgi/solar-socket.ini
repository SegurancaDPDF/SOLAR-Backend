[uwsgi]
base = /app
app = wsgi

master = true
processes = 4
max-requests = 4000
max-requests-delta = 4000
limit-as = 1024
buffer-size= 32768

pythonpath = %(base)/src
module = config.%(app):application
enable-threads = true
die-on-term = true

static-map = /media=/app/src/media
static-map = /static=/app/src/staticfiles_producao
static-expires = /* 7776000
offload-threads = %k

max-worker-lifetime = 30
max-worker-lifetime-delta = 30
vacuum = true

# configuração para socket
socket = 0.0.0.0:1024

disable-logging = true
log-4xx = true
log-5xx = true

http-auto-gzip = false

# Fix Sentry IOError: write error
ignore-sigpipe = true
ignore-write-errors = true
disable-write-exception = true

# Configuring uWSGI for Production Deployment
# https://www.techatbloomberg.com/blog/configuring-uwsgi-production-deployment/
# strict = true
master = true
# enable-threads = true
# vacuum = true                        ; Delete sockets during shutdown
# single-interpreter = true
# die-on-term = true                   ; Shutdown when receiving SIGTERM (default is respawn)
# need-app = true

# disable-logging = true               ; Disable built-in logging 
# log-4xx = true                       ; but log 4xx's anyway
# log-5xx = true                       ; and 5xx's

harakiri = 30                        ; forcefully kill workers after 60 seconds
py-callos-afterfork = true           ; allow workers to trap signals

max-requests = 1000                  ; Restart workers after this many requests
max-worker-lifetime = 3600           ; Restart workers after this many seconds
reload-on-rss = 2048                 ; Restart workers after this much resident memory
worker-reload-mercy = 30             ; How long to wait before forcefully killing workers

# cheaper-algo = busyness
# processes = 128                      ; Maximum number of workers allowed
# cheaper = 8                          ; Minimum number of workers allowed
# cheaper-initial = 16                 ; Workers created at startup
# cheaper-overload = 1                 ; Length of a cycle in seconds
# cheaper-step = 16                    ; How many workers to spawn at a time

# cheaper-busyness-multiplier = 30     ; How many cycles to wait before killing workers
# cheaper-busyness-min = 20            ; Below this threshold, kill workers (if stable for multiplier cycles)
# cheaper-busyness-max = 70            ; Above this threshold, spawn new workers
# cheaper-busyness-backlog-alert = 16  ; Spawn emergency workers if more than this many requests are waiting in the queue
# cheaper-busyness-backlog-step = 2    ; How many emergency workers to create if there are too many requests in the queue
